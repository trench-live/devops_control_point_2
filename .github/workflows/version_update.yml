name: Version update
on:
  workflow_call:

env:
  RELEASE_BRANCH: release
  VERSION_UP: .github/scripts/version_update.py

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.update-version.outputs.NEW_VERSION }}

    steps:
      # Step 1: Checkout release branch
      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.RELEASE_BRANCH }}

      # Step 2: Get branch info
      - name: Extract branch info
        id: branch-info
        uses: tj-actions/branch-names@v8

      # Step 3: Validate branch
      - name: Validate branch (feature/hotfix)
        id: validate-branch
        run: |
          if [[ ! "${{ steps.branch-info.outputs.current_branch }}" =~ ^(feature|hotfix)/ ]]; then
            echo "::error::Branch must be either feature/* or hotfix/*"
            exit 1
          fi

      # Step 4: Determine update type
      - name: Determine version update type
        id: version-type
        run: |
          if [[ "${{ steps.branch-info.outputs.current_branch }}" == feature/* ]]; then
            echo "UPDATE_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "UPDATE_TYPE=patch" >> $GITHUB_OUTPUT
          fi

      # Step 5: Run version update script
      - name: Update version
        id: update-version
        run: |
          OLD_VERSION=$(python ${{ env.VERSION_UP }} get)
          python ${{ env.VERSION_UP }} ${{ steps.version-type.outputs.UPDATE_TYPE }}
          NEW_VERSION=$(python ${{ env.VERSION_UP }} get)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Step 6: Clean pycache
      - name: Clean __pycache__
        run: |
          find .github/scripts -name "__pycache__" -exec rm -rf {} + || true
          find .github/scripts -name "*.pyc" -delete

      # Step 7: Configure git
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      # Step 8: Commit changes
      - name: Commit version update
        run: |
          git add version_info/
          git commit -m "[${{ steps.update-version.outputs.NEW_VERSION }}] <- [${{ steps.update-version.outputs.OLD_VERSION }}] ${{ steps.version-type.outputs.UPDATE_TYPE }} up"

      # Step 9: Push changes
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin ${{ env.RELEASE_BRANCH }}