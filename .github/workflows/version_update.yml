name: Version update
on:
  workflow_call:

env:
  RELEASE_BRANCH: release
  MINOR: minor
  PATCH: patch
  VERSION_UP: .github/scripts/version_update.py

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version-output.outputs.NEW_VERSION }}

    steps:
      # Step 1: Getting branch info
      - name: Extract branch info
        id: branch-info
        uses: tj-actions/branch-names@v8

      # Step 2: Validating branch
      - name: Validate branch (feature/hotfix)
        id: validate-branch
        run: |
          if [[ ! "${{ steps.branch-info.outputs.current_branch }}" =~ ^(feature|hotfix)/ ]]; then
            echo "::error::Branch must be either feature/* or hotfix/*"
            exit 1
          fi

      # Step 3: Checkout release branch code
      - name: Ð¡heckout on [${{env.RELEASE_BRANCH}}]
        uses: actions/checkout@v2

      # Step 4: Determine update type
      - name: Determine version update type
        id: version-type
        run: |
          if [[ "${{ steps.branch-info.outputs.current_branch }}" == feature/* ]]; then
            echo "UPDATE_TYPE=minor" >> $GITHUB_OUTPUT
          else
            echo "UPDATE_TYPE=patch" >> $GITHUB_OUTPUT
          fi

      # Step 5: Version update
      - name: Update version
        id: update-version
        run: |
          OLD_VERSION=$(python ${{ env.VERSION_UP }} get)
          python ${{ env.VERSION_UP }} ${{ steps.version-type.outputs.BUMP_TYPE }}
          NEW_VERSION=$(python ${{ env.VERSION_UP }} get)
          echo "OLD_VERSION=$OLD_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      # Step 5: Configure git
      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"

      # Step 7: Commit changes
      - name: Commit version update
        run: |
          git add .
          git commit -m "[${{ steps.update-version.outputs.NEW_VERSION }}] <- [${{ steps.update-version.outputs.OLD_VERSION }}] ${{ steps.version-type.outputs.UPDATE_TYPE }} up"

      # Step 8: Push changes
      - name: Push changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin ${RELEASE_BRANCH}