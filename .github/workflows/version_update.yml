name: Version files update
on:
  workflow_call:

env:
  NAME_VERSION_FILE: ${{ github.workspace }}/version_info/version
  RELEASE_BRANCH: release
  MINOR: minor
  PATCH: patch
  VERSION_UP: .github/workflows/version_update.py

jobs:
  validate_branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Parse branch name
        id: parse-data
        uses: tj-actions/branch-names@v8

      - name: Print info about actions
        run: |
          echo "EVENT_NAME   ${{github.event_name}}"
          echo "ACTION       ${{github.event.action}}"
          echo "IS_PULL_REQUEST_MERGED   ${{github.pull_request.merged}}"
          echo "CURRENT_BRANCH     ${{steps.parse-data.outputs.current_branch}}"
          echo "REF          ${{github.ref}}"
          echo "REF_NAME     ${{github.ref_name}}"
          echo "DEFAULT_BRANCH  ${{steps.parse-data.outputs.default_branch}}"

  update-version:
    runs-on: ubuntu-latest
    needs: validate_branch
    outputs:
      tag: ${{steps.output-tag.outputs.TAG_MSG}}
    steps:
      - name: Parse branch name
        id: parse-data
        uses: tj-actions/branch-names@v8

      - name: Ð¡heckout on [${{env.RELEASE_BRANCH}}]
        uses: actions/checkout@v2

      - name: Validate branch (feature/hotfix)
        id: validate_branch
        if: |
          contains(steps.parse-data.outputs.current_branch, 'feature') || 
          contains(steps.parse-data.outputs.current_branch, 'hotfix')
        run: echo "Valid branch"

      - name: Run minor version update script
        id: update-minor-version
        if: |
          contains(steps.parse-data.outputs.current_branch, 'feature')
        run: |
          echo "python ${VERSION_UP} ${MINOR} ${NAME_VERSION_FILE}"
          python ${VERSION_UP} ${MINOR} ${NAME_VERSION_FILE}

      - name: Run patch version update script
        id: update-patch-version
        if: |
          contains(steps.parse-data.outputs.current_branch, 'hotfix')
        run: |
          python ${VERSION_UP} ${PATCH} ${NAME_VERSION_FILE}

      - name: Set output tag
        id: output-tag
        run: TAG_MSG=$(python ${{env.VERSION_UP}} ${{env.NAME_VERSION_FILE}} version)

      - name: Setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Update version"
          git push origin ${RELEASE_BRANCH}